// Test completo del sistema de almacenamiento sincronizado
const productsFunction = require('./netlify/functions/products');
const statsFunction = require('./netlify/functions/stats');
const updateFunction = require('./netlify/functions/update-product');
const deleteFunction = require('./netlify/functions/delete-product');

async function testSyncedStorage() {
  console.log('üß™ INICIANDO TEST DE ALMACENAMIENTO SINCRONIZADO\n');
  
  // 1. Verificar productos iniciales
  console.log('1Ô∏è‚É£ Obteniendo productos iniciales...');
  const initialProducts = await productsFunction.handler({
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: null
  });
  
  const initialData = JSON.parse(initialProducts.body);
  console.log('üì¶ Productos iniciales:', Object.values(initialData).flat().length);
  
  // 2. Obtener estad√≠sticas iniciales
  console.log('\n2Ô∏è‚É£ Obteniendo estad√≠sticas iniciales...');
  const initialStats = await statsFunction.handler({
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: null
  });
  
  const initialStatsData = JSON.parse(initialStats.body);
  console.log('üìä Stats iniciales:', initialStatsData);
  
  // 3. Agregar un producto nuevo
  console.log('\n3Ô∏è‚É£ Agregando producto nuevo...');
  const newProduct = {
    name: "Ramo Test Sincronizaci√≥n",
    category: "ramos",
    price: 199.99,
    description: "Producto de prueba para verificar sincronizaci√≥n",
    filter: "products",
    featured: true
  };
  
  const addResult = await productsFunction.handler({
    httpMethod: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify(newProduct)
  });
  
  const addedProduct = JSON.parse(addResult.body);
  console.log('‚úÖ Producto agregado:', addedProduct.product.name, 'ID:', addedProduct.product.id);
  
  // 4. Verificar que el producto aparece en GET
  console.log('\n4Ô∏è‚É£ Verificando que el producto aparece en GET...');
  const updatedProducts = await productsFunction.handler({
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: null
  });
  
  const updatedData = JSON.parse(updatedProducts.body);
  const totalProducts = Object.values(updatedData).flat().length;
  console.log('üì¶ Total productos despu√©s de agregar:', totalProducts);
  
  // 5. Verificar que las estad√≠sticas se actualizaron
  console.log('\n5Ô∏è‚É£ Verificando estad√≠sticas actualizadas...');
  const updatedStats = await statsFunction.handler({
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: null
  });
  
  const updatedStatsData = JSON.parse(updatedStats.body);
  console.log('üìä Stats actualizadas:', updatedStatsData);
  
  // 6. Editar el producto
  console.log('\n6Ô∏è‚É£ Editando el producto...');
  const editResult = await updateFunction.handler({
    httpMethod: 'PUT',
    queryStringParameters: { id: addedProduct.product.id.toString() },
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      name: "Ramo Test EDITADO",
      price: 299.99
    })
  });
  
  const editedProduct = JSON.parse(editResult.body);
  console.log('‚úèÔ∏è Producto editado:', editedProduct.product.name, 'Nuevo precio:', editedProduct.product.price);
  
  // 7. Eliminar el producto
  console.log('\n7Ô∏è‚É£ Eliminando el producto...');
  const deleteResult = await deleteFunction.handler({
    httpMethod: 'DELETE',
    queryStringParameters: { id: addedProduct.product.id.toString() },
    headers: {}
  });
  
  const deleteResponse = JSON.parse(deleteResult.body);
  console.log('üóëÔ∏è Producto eliminado:', deleteResponse.message);
  
  // 8. Verificar estad√≠sticas finales
  console.log('\n8Ô∏è‚É£ Verificando estad√≠sticas finales...');
  const finalStats = await statsFunction.handler({
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: null
  });
  
  const finalStatsData = JSON.parse(finalStats.body);
  console.log('üìä Stats finales:', finalStatsData);
  
  // 9. Resumen
  console.log('\nüéØ RESUMEN DEL TEST:');
  console.log('- Productos iniciales:', initialStatsData.totalProducts);
  console.log('- Despu√©s de agregar:', updatedStatsData.totalProducts);
  console.log('- Despu√©s de eliminar:', finalStatsData.totalProducts);
  console.log('- ‚úÖ Sincronizaci√≥n:', 
    initialStatsData.totalProducts === finalStatsData.totalProducts ? 'CORRECTA' : 'FALLIDA'
  );
}

// Ejecutar test
testSyncedStorage().catch(console.error);